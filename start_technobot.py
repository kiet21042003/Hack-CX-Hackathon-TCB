#!/usr/bin/env python3
"""
TECHNOBOT Startup Script - Safe for Corporate Environment
T·ªëi ∆∞u cho m√¥i tr∆∞·ªùng c√¥ng ty v·ªõi Trellix Endpoint Security
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

def check_requirements():
    """Ki·ªÉm tra c√°c y√™u c·∫ßu c·∫ßn thi·∫øt"""
    print("üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng...")
    
    # Check Python version
    if sys.version_info < (3, 11):
        print("‚ùå C·∫ßn Python 3.11 tr·ªü l√™n")
        return False
    
    # Check required files
    required_files = [
        "technobot_chatbot.py",
        "output/customer_recommendations_output.csv",
        "data/metadata_user.csv"
    ]
    
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file}")
            return False
    
    print("‚úÖ M√¥i tr∆∞·ªùng OK")
    return True

def install_dependencies():
    """C√†i ƒë·∫∑t dependencies n·∫øu c·∫ßn"""
    print("üì¶ Ki·ªÉm tra dependencies...")
    
    try:
        import gradio
        import pandas
        import requests
        print("‚úÖ Dependencies ƒë√£ c√≥ s·∫µn")
        return True
    except ImportError:
        print("‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t dependencies...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
            print("‚úÖ ƒê√£ c√†i ƒë·∫∑t dependencies")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå L·ªói c√†i ƒë·∫∑t dependencies")
            return False

def find_available_port(start_port=7861):
    """T√¨m port kh·∫£ d·ª•ng"""
    import socket
    
    for port in range(start_port, start_port + 10):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                print(f"‚úÖ T√¨m th·∫•y port kh·∫£ d·ª•ng: {port}")
                return port
        except OSError:
            continue
    
    print("‚ùå Kh√¥ng t√¨m th·∫•y port kh·∫£ d·ª•ng")
    return None

def start_technobot_safe():
    """Kh·ªüi ƒë·ªông TECHNOBOT an to√†n cho m√¥i tr∆∞·ªùng c√¥ng ty"""
    print("ü§ñ TECHNOBOT - Corporate Safe Startup")
    print("=" * 50)
    
    # Check environment
    if not check_requirements():
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Install dependencies
    if not install_dependencies():
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Find available port
    port = find_available_port()
    if not port:
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    print(f"üöÄ Kh·ªüi ƒë·ªông TECHNOBOT t·∫°i port {port}...")
    print("üîí Ch·∫ø ƒë·ªô an to√†n cho m√¥i tr∆∞·ªùng c√¥ng ty")
    print("üìç Ch·ªâ ch·∫°y local, kh√¥ng t·∫°o share link")
    print("-" * 50)
    
    # Set environment variables for safe mode
    os.environ['GRADIO_SERVER_PORT'] = str(port)
    os.environ['GRADIO_SERVER_NAME'] = '127.0.0.1'
    os.environ['GRADIO_SHARE'] = 'False'
    
    # Start the application
    try:
        # Import and modify the app for safe startup
        import technobot_chatbot
        
        # Override launch parameters for corporate safety
        original_launch = technobot_chatbot.app.launch
        
        def safe_launch(*args, **kwargs):
            # Force safe parameters
            kwargs.update({
                'server_name': '127.0.0.1',
                'server_port': port,
                'share': False,
                'show_error': True,
                'inbrowser': True,
                'quiet': False
            })
            return original_launch(*args, **kwargs)
        
        technobot_chatbot.app.launch = safe_launch
        
        print(f"‚úÖ TECHNOBOT ƒëang ch·∫°y t·∫°i: http://127.0.0.1:{port}")
        print("üåê Tr√¨nh duy·ªát s·∫Ω t·ª± ƒë·ªông m·ªü...")
        print("‚ö†Ô∏è ƒê·ªÉ d·ª´ng: Nh·∫•n Ctrl+C")
        print("=" * 50)
        
        # Start the app
        technobot_chatbot.app.launch()
        
    except KeyboardInterrupt:
        print("\nüõë TECHNOBOT ƒë√£ d·ª´ng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    start_technobot_safe() 